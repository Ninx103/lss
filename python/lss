#! /usr/bin/python

"""This is the lss module.

This module outputs a file path's entities into a human readable format.

I started with the idea that I wanted to generate a mapping sequence of 
file base names with numbers replaced with a single '#' octothorpe character.

i.e. file01_0001.rgb -> file##_####.rgb

So as I loop through the entire list of files, I'm generating the base name for later lookup.
All the numbers that are stripped from the name get placed into a dictionary with
the position of the number in the string as the key, and a tuple of the str/int 
values of the number in the string. I do this because I will need to preserve the
padding along with storing the int value of the number for sequence grouping later.

VERSION:
file01_0001.rgb -> {4:('01', 1), 7:('0001', 1)}

This next part is fun.

Each base filename starts to generate a list of bases. The idea here
is to use these bases as unique/non-sequencing files while looping through all
the other files. As a new version is created, it compares it to the list of base 
versions to determine if the numbers are incremented or a completely new version. 

If any of the versions items are similar to any base version, I determine 
that it is an increment; I add 1 to the base version count, 
I add 1 to the position that incremented, and I push it to the files list.

If NONE of the bases match the version, it is registered as a new base.
Then I loop through all the files already pushed into the 'files' list to 
look for files I could have already pushed through that belong to the new base.

file01_0001.rgb
file01_0002.rgb
Here's an example of a mapped filename with two files:
{'file#_#.rgb': {'groups': [{'base': {4:('01', 1), 7:('0001', 1)}, 
                             'count': 2,
                             'poscount': {7:2}}]
                 'files': [{4:('01', 1), 7:('0002', 2)}]

The last bit of logic comes in at the print for loop. I determine that files
with the largest file increment counts should go first since they are the 
highest likely to be the correct file sequence in the directory. 

I loop over the bases, sorted by the highest count. 
Then I sort each string position within the base by its highest position count, 
(and again by the right-most position as a tie-breaker). 
I loop through the file names, collecting files that increment at the
highest poscount position, add the base version, and print the formatted output.

My main goal here was to not build an algorithm that had O(n^2) notation. I also didnt want
to ping the filesystem numerous amounts of time as well to find best-guesses. I wanted
to loop through as little much as possible with most cases of directories.
Because the challenge indicated that the increments could be in any number position,
this can still cause the algorithm to have poor performance based on the contents
of the directory.

I suppose this is why we use file naming standards.

i.e. file001_[001-100].rgb, file002_[001-100].rgb, file003_[001-100].rgb, ... file100_[001-100].rgb
"""
__version__ = '0.1'
__author__ = 'Alex Boyle'

from os import listdir
from os import path
from os import curdir
from operator import itemgetter
from itertools import groupby
import re
import sys

def lss(path):
    """Output human-readable list of files from path.
    :param path: a valid folder path
    """
    singleregex = re.compile("\d")
    regex = re.compile("\d+")
    filebasedict = {}     #file base name groupings ({'file##_####.rgb': {[],[]}})

    for filepath in listdir(path):
        poundstring = singleregex.sub("#", filepath)

        version = {}
        for number in regex.finditer(filepath):
            version[number.start()] = (number.group(), int(number.group()))

        if filebasedict.get(poundstring, None) is None:
            #I am registering a new file base name and its numbers as a base version number
            #I also create a list of 'files' for the purpose of collecting the files that will match against the bases later on.
            filebasedict[poundstring] = {'groups': [{'base': version,'count': 1, 'poscount': {}}], 
                                       'files': []}
        else:
            grouplist = filebasedict[poundstring]
            
            #I loop through all the base version numbers to detect if a file can increment on it
            # I detect an increment if only ONE of the numbers is different than the rest. 
            # This is to accomodate files with 1+ sets of numbers.
            found = False 
            for group in grouplist['groups']:
                #use a generator here to get a list of the keys (string positions) that are different by comparing the base tuple to the incoming version tuple
                increments = [k for k, x in group['base'].items() if x != version.get(k, None)]
                if len(increments) == 1:
                    #If just one position is different, its an increment candidate
                    #I increment the position counter along with the total count
                    pos = increments[0]
                    group['count'] += 1
                    group['poscount'][pos] = group['poscount'].get(pos, 1) + 1
                    found = True
            if found:
                # if at least one base incremented, then I just append the file to the list of files within the base name
                grouplist['files'].append(version)
            if not found:
                # if there was not a match found, then the file is a new base and needs to be added to the list of bases under the base filename
                # the new base version also needs to check the existing list of files within its base for potential increment catches as well.
                base = {'base':version, 'count': 1, 'poscount':{}}
                for f in grouplist['files']:
                    increments = [k for k, x in f.items() if x != version.get(k, None)]
                    if len(increments) == 1:
                        pos = increments[0]
                        base['count'] += 1
                        base['poscount'][pos] = base['poscount'].get(pos, 1) + 1
                grouplist['groups'].append(base)

    # Once I looped through all the files and have sorted them, this is the logic to build the final ouput rows.
    # each row is the key base file name in the filebasedict. I take the key (i.e. file##_####.rgb) and begin to determine
    # which base count is the highest. This was my logic for determining the best sequence candidates and plucking the 
    # files out that match. 
    for filename, row in filebasedict.items():
        for group in sorted(row['groups'], key=lambda x:-x['count']):
            # Each base is going to be its own print row.
            finalname = filename
            base = group['base']
            framerange = ""
            padding = ""
            finalfiles = []
            for k,v in sorted(base.items(), key=lambda (x, y):x):
                # This generates the finalname with the base file added back in
                finalname = finalname[:k] + v[0] + finalname[k+len(v[0]):]
            if group['poscount']:
                # Sorting by the highest count, then by the highest position (-y). This is used as the tie breaker 
                # I am using the right-most number set position (-x) as the increment in the event of a tie.
                inc = sorted(group['poscount'].items(), key=lambda (x,y):(-y, -x)) 
                incpos = inc[0][0] #store this since I'd like to avoid more lookups
                finalfiles = [base[incpos][1]] #add the base to the final files - hey, the base file name is a file too.
                tempbase = {(k,v) for k,v in base.items() if k != incpos} 
                for f in row['files'][:]:
                    # here is where I build the list of increment digits. If the base with the incremented (incpos) is removed,
                    # and if the dictionaries match, I remove the file from the list of files (I can only count it once)
                    # and then I add the int value of the tuple to the finalfiles list. This will be used to generate the str range
                    if tempbase == {(k,v) for k,v in f.items() if k != incpos}:
                        row['files'].remove(f)
                        finalfiles.append(f[incpos][1])

                if len(finalfiles) > 1:
                    # I run this if padding substitution needs to occur basded on the length othe finalfiles list.
                    padded = len(base[incpos][0])
                    padding = "%d"
                    if padded > 1:
                        padding = "%%%sd" %(str(padded).zfill(2))
                    # I read about this being more efficient than using string methods sub/lsub
                    finalname = finalname[:incpos] + padding + finalname[incpos+padded:]

                    # Found this general groupby/map expression. Takes a list of numbers to output lists of numbers that increment.
                    # i.e. [1,2,3,4] [7,8,9,10] [12] -> 1-4 7-10 12
                    for k, g in groupby(enumerate(sorted(finalfiles)), lambda (i,x):i-x):
                        sequence = map(itemgetter(1), g)
                        tempstr = str(sequence[0])
                        if len(sequence) > 1:
                            tempstr += "-%s" %sequence[-1]
                        framerange += " " + tempstr

            count = str(len(finalfiles)).ljust(4) if finalfiles else "1   "
            print '%s%s%s' %(count, finalname.ljust(25), framerange)

if __name__ in "__main__":
    if len(sys.argv) > 1:
        p =  path.abspath(sys.argv[1])
        if not path.exists(p):
            print "ERROR: cannot expand path '%s'. Please verify the path exists." %p
            sys.exit(1)
    else:
        p = curdir

    lss(p)